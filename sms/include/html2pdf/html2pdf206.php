<?php
/*
 * Modify on Mar 7, 2009 by Ruk
 *
 * To change the template for this generated file go to
 * Window - Preferences - PHPeclipse - PHP - Code Templates
 *  html2pdf version 2.0.1
 * This version :
 *  - extends class from fpdf
 * 	- read data from html and write data to pdf
 * 	- change html fomat to array before write to pdf file
 *  - write data on cell not assign position x,y
 *  - enter to new line when text width more than cell width
 *  - can read thai font
 *  - can read file from remote server
 *  - can show bold character of each character set
 *  - can set fill color into cell by tr or td bgcolor
 * Modify on Mar 11, 2009 by Ruk
 *  - debug lenght of row over the table width
 *  - set color to each string in same cell
 * Modify on Mar 12,2009
 *  - debug td color at all 
 * Modify on April 25,2009
 *  - make to support sub table in table
 *  - support span tag
 * Last modify on June 02,2009
 *  - support export image for report graph only
 */
 

 //define('HTML2FPDF_VERSION','3.0(beta)');

if (!defined('RELATIVE_PATH')) define('RELATIVE_PATH','');
if (!defined('FPDF_FONTPATH')) define('FPDF_FONTPATH','html2pdf/font/');
require_once(RELATIVE_PATH.'fpdf.php');
require_once(RELATIVE_PATH.'htmltoolkit.php');

class HTML2FPDF_GRAPH extends FPDF{
	var $enabledtags;
	var $tdbegin; //! bool
	var $table=array(); //! array
	var $col; //! int
	var $row; //! int
	var $nowTable;//!int
	//var $align; //!string
	
	var $pgWidth;//int
	var $padding;//array
	var $visualBlock=array();//Array
	var $visualX;//Int
	var $visualY;//Int
	var $isBr;//boolean
	var $style=array();//Array
	var $border;//String
	var $tdWidth;//int
	var $trHeigth;//int
	var $rowSpace;//string
	
	/// for set front
	var $fFamily;//string
	var $fStyle;//string
	var $fSize;//int
	var $cPage=0;//int count page 
	var $sLMargin=0;
	
//Debug Undefined Index
var $divrevert;
var $toupper;
var $tolower;
//
	
	function HTML2FPDF_GRAPH($orientation='P',$unit='mm',$format='A4'){
	//! @desc Constructor
	//! @return An object (a class instance)
	//Call parent constructor
		$this->FPDF($orientation,$unit,$format);
		/////// Set defualt font to AngsanaNew /////////////////
		$this->AddFont('AngsanaNew','','angsa.php');
		$this->AddFont('AngsanaNew','B','angsab.php');
		$this->AddFont('AngsanaNew','I','angsai.php');
		$this->AddFont('AngsanaNew','IB','angsaz.php');
		$this->fFamily="AngsanaNew";
		/////// Set defualt font style to no style /////////////
		$this->fStyle="";
		/////// Set defualt font size to 12 ////////////////////
		$this->fSize=12;
		//$this->lMargin=$this->sLMargin;
		$this->reSetFont();
		$this->DisableTags();
		/////// Set initial page width /////////////////////////
		$this->pgWidth = $this->w - $this->lMargin - $this->rMargin ;
		$this->nowTable=0;
		
	}
	// Page header
	function header()
	{
	   ////////// Not set header for this system ////////////////
	}

	//Page footer
	function footer()
	{
	    //Position at 1.5 cm from bottom
	    //$this->SetY(-15);
	    $this->SetXY(30,-15);
	    //Arial italic 8
	    $this->SetFont($this->fFamily,'',$this->fSize-2);
	    //Page number
	    $this->Cell(0,10,'Page '.$this->PageNo(),0,0,'C');
	}
	
///////////////////
/// HTML parser ///
///////////////////
function writeHTML($html)
{
//! @desc HTML parser
//! @return void
/* $e == content */
	//echo "<br>Write Content";
	$this->sLMargin=$this->lMargin;
  $this->readMetaTags($html);
  $html = AdjustHTML($html,false); //Try to make HTML look more like XHTML
   //Add new supported tags in the DisableTags function
	$html=str_replace('<?','< ',$html); //Fix '<?XML' bug from HTML code generated by MS Word
	$html=strip_tags($html,$this->enabledtags); //remove all unsupported tags, but the ones inside the 'enabledtags' string
  //Explode the string in order to parse the HTML code
	$a=preg_split('/<(.*?)>/ms',$html,-1,PREG_SPLIT_DELIM_CAPTURE);
	////////// Count table in page and get colum of each table
	//$this->countTable($a);

	foreach($a as $i => $e){
//Debug Undefined Index
if(!isset($this->visualBlock[$this->visualX][$this->visualY]["br"])){$this->visualBlock[$this->visualX][$this->visualY]["br"]="";}
if(!isset($this->style["bFont"][$this->visualX])){$this->style["bFont"][$this->visualX]="";}
//
		//print_r($this-table);
		//echo "<br>$e";
		if($i%2==0)
		{
			if (strpos($e,"&") !== false) //HTML-ENTITIES decoding
			{
				if (strpos($e,"#") !== false) $e = value_entity_decode($e); // Decode value entities
		        //Avoid crashing the script on PHP 4.0
		        $version = phpversion();
		        $version = str_replace('.','',$version);
		        if ($version >= 430) $e = html_entity_decode($e,ENT_QUOTES,'cp1252'); // changes &nbsp; and the like by their respective char
		        else $e = lesser_entity_decode($e);
		    }
	     	$e = str_replace(chr(160),chr(32),$e); //unify ascii code of spaces (in order to recognize all of them correctly)
			if (strlen($e) == 0) continue;
			if ($this->divrevert) $e = strrev($e);
			if ($this->toupper) $e = strtoupper($e);
			if ($this->tolower) $e = strtolower($e);
		    
		    if($this->tdbegin)
	       	{
	       		//echo "<br> $e ";
	       		/////////////// Keep data to visual block /////////////////
	       		//echo "<br>visual X ".$this->visualX." visual Y : ".$this->visualY." -- Data : $e";
	       		$this->visualBlock[$this->visualX][$this->visualY]["data"]=$e;
	       		if($this->style["bFont"][$this->visualX]){
	       			$this->visualBlock[$this->visualX][$this->visualY]["bFont"]=true;
	       		}
		    	///////// Check has enter to new line /////////////////////    		
				if($this->isBr){
				   	$this->visualBlock[$this->visualX][$this->visualY]["br"]++;	
				   	$this->table[$this->nowTable]["tdBr"]++;
				}
			    $this->isBr=false;
	       	}
		}else{
			
			if($e{0}=='/'){
				 $this->CloseTag(strtoupper(substr($e,1)));
			}else{
				/////////////////////// check tag open
			    $regexp = '|=\'(.*?)\'|s'; // eliminate single quotes, if any
		      	$e = preg_replace($regexp,"=\"\$1\"",$e);
		      			$regexp = '| (\\w+?)=([^\\s>"]+)|si'; // changes anykey=anyvalue to anykey="anyvalue" (only do this when this happens inside tags)
		      	$e = preg_replace($regexp," \$1=\"\$2\"",$e);
				//Extract attributes
				$contents=array();
		        preg_match_all('/\\S*=["\'][^"\']*["\']/',$e,$contents);
		        preg_match('/\\S+/',$e,$a2);
		       	///////// Get tag name and change to upper character ////////////
		       	$tag=strtoupper($a2[0]);
		     	$attr=array();
		       	//Ignore content between <table>,<tr> and a <td> tag (this content is usually only a bunch of spaces)
				if (!empty($contents))
				{
		  			foreach($contents[0] as $v)
		  			{
		  				if(ereg('^([^=]*)=["\']?([^"\']*)["\']?$',$v,$a3))
		    			{
		    				//////// Get content name and change to uper character //////////
		    				$attr[strtoupper($a3[1])]=$a3[2];
		     			}
		  			}
				}
				$this->OpenTag($tag,$attr);
			}
		}
	}
}
function OpenTag($tag,$attr)
{
	//! @return void
	// What this gets: < $tag $attr['WIDTH']="90px" > does not get content here </closeTag here>

  	//$align = array('left'=>'L','center'=>'C','right'=>'R','top'=>'T','middle'=>'M','bottom'=>'B','justify'=>'J');
	//echo "<br>$tag";
	
	//echo "<br>Tag : $tag";
	//echo "<br>Tag Content : ".$attr["CLASS"];

//Debug Undefined Index
if(!isset($attr["ALIGN"])){$attr["ALIGN"]="";}
if(!isset($attr["COLSPAN"])){$attr["COLSPAN"]="";}
if(!isset($attr["CLASS"])){$attr["CLASS"]="";}
if(!isset($attr["BGCOLOR"])){$attr["BGCOLOR"]="";}
if(!isset($attr["HEIGHT"])){$attr["HEIGHT"]="";}
if(!isset($attr['WIDTH'])){$attr['WIDTH']="";}
if(!isset($this->table[$this->nowTable]["tdWidth"][$this->col])){$this->table[$this->nowTable]["tdWidth"][$this->col]=null;}
if(!isset($this->table[$this->nowTable-1]["nowTdWidth"])){$this->table[$this->nowTable-1]["nowTdWidth"]="";}
//
	switch($tag){
    
	case 'TABLE': // TABLE-BEGIN
		
		//echo "<br>Table";
		$this->nowTable++;
		$this->align="";
		$this->border="";
    	$this->table[$this->nowTable]["tdWidth"]=array();
    	$this->table[$this->nowTable]["trHeight"]=array();
    	$this->table[$this->nowTable]["tableHeight"]=0;
    	$this->table[$this->nowTable]["nowTdWidth"]=0;
    	$this->table[$this->nowTable]["nowPosX"]=0;
    	$this->table[$this->nowTable]["image"]=array();
    	if(!isset($this->table[$this->nowTable]["tableMaxHeight"])){
    		$this->table[$this->nowTable]["tableMaxHeight"]=0;
    	}
    	//echo "<br>Margin : ".$this->lMargin;
    	//$this->lMargin=30;
    	//echo "<br><br>Pos X : ".$this->GetX();
    	//echo "<br>Page Width : ".$this->pgWidth;
    	//echo "<br>TD WIDTH : ".$this->table[$this->nowTable-1]["nowTdWidth"];
    	if($this->nowTable>2){
			$this->lMargin=$this->table[$this->nowTable-1]["nowPosX"];
			//echo "<br>L Margin : ".$this->lMargin;
		}
    	
    	$this->row=0;
    	
			break;
	case 'TR':
		////////// check td bgcolor
		//echo "<br>Tr";
		$this->table[$this->nowTable]["trBgColor"][$this->row]=$attr["BGCOLOR"];
		$this->rowSpace="";
		$this->table[$this->nowTable]["trHeight"][$this->row]=$attr["HEIGHT"]/5;
		
		$this->col=0;
		break;
	case 'TD':
		
		//echo "<br>".$this->col." -- Td";
		$this->table[$this->nowTable]["tdBr"]=0;
		////// Init visual block
		$this->visualBlock=array();
		$this->visualX=0;
		$this->visualY=0;
		$this->countBr=0;
		
		/////////// Check style of td /////////////
		if($this->table[$this->nowTable]["tdWidth"][$this->col]==null){
			if(stristr($attr["WIDTH"],'%')=="%"){
				$this->table[$this->nowTable]["tdWidth"][$this->col]=ConvertSize($attr['WIDTH'],($this->table[$this->nowTable-1]["nowTdWidth"])?$this->table[$this->nowTable-1]["nowTdWidth"]:$this->pgWidth);
				//$this->table[$this->nowTable]["tdWidth"][$this->col]=ConvertSize($attr['WIDTH'],$this->pgWidth);
			}else{
				$this->table[$this->nowTable]["tdWidth"][$this->col]=getTdSize($this->table[$this->nowTable]["td"],($this->table[$this->nowTable-1]["nowTdWidth"])?$this->table[$this->nowTable-1]["nowTdWidth"]:$this->pgWidth);	
			}
		}
		
		if($attr["ALIGN"]){
			$this->align=$attr['ALIGN'];	
		}
		///// assign td colspan
		if($attr["COLSPAN"]){
			//echo "<br>Col span : ".$attr["COLSPAN"];
			$this->table[$this->nowTable]["tdColSpan"]=$attr["COLSPAN"];	
		}else{
			$this->table[$this->nowTable]["tdColSpan"]=0;	
		}
		if($this->table[$this->nowTable]["tdColSpan"]){
			for($i=0;$i<$this->table[$this->nowTable]["tdColSpan"];$i++){
			//Debug Undefined Index
			if(!isset($this->table[$this->nowTable]["tdWidth"][$this->col+$i])){$this->table[$this->nowTable]["tdWidth"][$this->col+$i]=0;}
			//
				//echo "<br>Colum : ".($this->col+$i)."<br> Colum width : ".$this->table[$this->nowTable]["tdWidth"][$this->col+$i];
				$this->tdWidth +=$this->table[$this->nowTable]["tdWidth"][$this->col+$i];	
			}
		}else{
			$this->tdWidth=$this->table[$this->nowTable]["tdWidth"][$this->col];
		}
		
		$this->table[$this->nowTable]["nowTdWidth"]=$this->tdWidth;	
		$this->tdWidth=0;
		
		////////// assign td class
		$this->table[$this->nowTable]["tdClass"][$this->col]=$attr["CLASS"];
		////////// check td bgcolor
		//echo "<br>Color --> ".$attr["BGCOLOR"]." -- colum -->".$this->col;
		$this->table[$this->nowTable]["tdBgColor"][$this->col]=$attr["BGCOLOR"];
		////////// Set start td
		$this->tdbegin=true;
	
		break;
	
	case 'P':
		$this->visualX++;
		break;
	
	case 'BR':
		$this->isBr=true;
		$this->visualY++;
		break;
	case 'B':
		$this->style["bFont"][$this->visualX]=true;
		//$this->visualBlock[$this->visualX][$this->visualY]["bFont"]=true;
	
		break;
	case 'SPAN':
		//echo "<br>OSPAN";
		break;
	case 'IMG':
		$this->table[$this->nowTable]["image"][$this->col]["src"]=$attr["SRC"];
		$this->table[$this->nowTable]["image"][$this->col]["width"]=$attr["WIDTH"]/7;
		if($attr["HEIGHT"]>2){
			$this->table[$this->nowTable]["image"][$this->col]["height"]=$attr["HEIGHT"]/9;	
		}else{
			$this->table[$this->nowTable]["image"][$this->col]["height"]=$attr["HEIGHT"]+2;
		}
		
		//echo "<br><br>Img : SCR --> ".$attr["SRC"];
		//echo "<br>Img : WIDTH --> ".$attr["WIDTH"];
		//echo "<br>Img : HEIGHT --> ".$attr["HEIGHT"];
	//print_r($_SERVER);
		//$this->Image($attr["SRC"],95,10,20);
		//echo $attr["SRC"];
		break;
	}

//Debug Undefined Index
if(!isset($attr["STYLE"])){$attr["STYLE"]="";}
if(!isset($attr["CLASS"])){$attr["CLASS"]="";}
//

	//echo "<br>Check Style";
	//////// Check style of each tag 
	$this->checkStyle($attr["STYLE"]);
	//////// Check class of each tag 
	$this->checkClass($attr["CLASS"]);
	
}
function CloseTag($tag)
{
//Debug Undefined Index
if(!isset($this->table[($this->nowTable)+1]["tableMaxHeight"])){$this->table[($this->nowTable)+1]["tableMaxHeight"]=0;}
//
	//$this->visualBlock[$this->visualX][$this->visualY]["color"]["set"]=true; Remove 27-04-2009 for check all color
	switch($tag){
    
	case 'TABLE': // TABLE-BEGIN
		//echo "<br><br>/Table";
		if($this->table[$this->nowTable]["tableMaxHeight"]<$this->table[$this->nowTable]["tableHeight"]){
			//echo "<br>Now Table : ".$this->nowTable;
			//echo "<br>Set Table Height : ".$this->table[$this->nowTable]["tableHeight"];
			$this->table[$this->nowTable]["tableMaxHeight"]=$this->table[$this->nowTable]["tableHeight"];
		}
		$this->nowTable--;
		//$this->SetY($this->table[$this->nowTable]["tableHeight"]);
		//Debug Undefined Index
		(isset($this->table[$this->nowTable]["tableHeight"]))?$this->SetY($this->table[$this->nowTable]["tableHeight"]):"";
		//
		//echo "<br>Close Table : ".$this->nowTable;
		
    	break;
	case 'TR':
		//echo "<br>/Tr";
		if($this->rowSpace){
			$tmpBoder=explode("BT",$this->rowSpace);
			$tmpBoder2=explode("TB",$this->rowSpace);
			if(count($tmpBoder)>1 || count($tmpBoder2)>1){
				$this->SetY($this->GetY()+0.3);
			}
		}
		//echo "<br>GET X : ".$this->GetX();
		
		//echo "<br>Now Height Max : ".$this->table[($this->nowTable)+1]["tableMaxHeight"];
		if($this->table[($this->nowTable)+1]["tableMaxHeight"]!=0){
			$this->SetY($this->table[($this->nowTable)+1]["tableMaxHeight"]);	
			//echo "<br>Set Now Height Max : ".$this->table[($this->nowTable)+1]["tableMaxHeight"];
		}
		
		$this->trHeigth=0;
		if($this->nowTable>2){
			//$this->table[$this->nowTable-1]["nowPosX"]=$this->GetX()+$this->table[$this->nowTable-1]["nowTdWidth"];
			//echo "<br>Set Pos X : ".$this->GetX();
			$this->table[$this->nowTable-1]["nowPosX"]=$this->GetX();
		}else{
			//echo "<br>set Margin ";
			$this->lMargin=$this->sLMargin;
		}
		$this->Ln();//$this->rowSpace
		
		$this->row++;
	
		break;
	case 'TD':
		//echo "<br>/Td";
		if($this->tdbegin){
			//echo "<br>Write col ".$this->col;
			if($this->table[$this->nowTable]["tdClass"][$this->col]=="reporth"){
				$this->rowSpace=1;
				//echo "<br>Class header ".$this->table[$this->nowTable]["tdClass"][$this->col];
				//echo "<br>Colum : ".$this->col;
				$this->SetFont($this->fFamily,"B",$this->fSize+4);
				$this->trHeigth=20;
			}else if($this->table[$this->nowTable]["tdClass"][$this->col]=="reference"){
			}else{
				$this->trHeigth=$this->table[$this->nowTable]["trHeight"][$this->row];
			}
			$col=$this->col;
			if($this->table[$this->nowTable]["tdColSpan"]){
				for($i=0;$i<$this->table[$this->nowTable]["tdColSpan"];$i++){
					//echo "<br>Colum : ".($this->col+$i)."<br> Colum width : ".$this->table[$this->nowTable]["tdWidth"][$this->col+$i];
					$this->tdWidth +=$this->table[$this->nowTable]["tdWidth"][$this->col+$i];	
				}
				$this->col+=$this->table[$this->nowTable]["tdColSpan"]-1;
				if(isset($this->table[$this->nowTable]["image"][$col]["src"])){
					$this->table[$this->nowTable]["image"][$this->col]["src"]=$this->table[$this->nowTable]["image"][$col]["src"];
					$this->table[$this->nowTable]["image"][$this->col]["width"]=$this->table[$this->nowTable]["image"][$col]["width"];
					$this->table[$this->nowTable]["image"][$this->col]["height"]=$this->table[$this->nowTable]["image"][$col]["height"];	
				}
			}else{
				$this->tdWidth=$this->table[$this->nowTable]["tdWidth"][$this->col];
			}
			$this->writeVisualBlockData($this->tdWidth,$this->trHeigth);
			$this->tdbegin=false;
			unset($this->table[$this->nowTable]["image"][$this->col]);
			$this->col++;
		}
		$this->table[$this->nowTable]["tdClass"][$this->col]="";
		$this->visualBlock[$this->visualX][$this->visualY]["color"]=array();
		$this->visualBlock[$this->visualX][$this->visualY]["bFont"]=false;
	    $this->reSetFont();
	    $this->tdWidth=0;
		if(strlen($this->rowSpace)<strlen($this->border)){
			$this->rowSpace=$this->border;	
		}
		$this->border="";
		$this->align="";
		///////// Set empty style all tag///////////
		unset($this->style);
		//$this->style=array();
		$this->table[$this->nowTable]["tdBgColor"][$this->col]="";
		////// Set empty all color td background ///////////////
		//unset($this->table[$this->nowTable]["tdBgColor"]);
		
		break;
	case 'P':
		//echo "<br>Set P Br ";
		$this->isBr=true;
		$this->visualY++;
		break;
	case 'B':
		//echo "<br>Unset B font";
		$this->visualX++;
		
		$this->style["bFont"][$this->visualX]=false;
		//$this->visualBlock[$this->visualX][$this->visualY]["bFont"]=false;
		break;
	case 'SPAN':
		//echo "<br>CSPAN";
		$this->visualX++;
		break;
	}
	
	
}
function readMetaTags($html)
{
//! @return void
//! @desc Pass meta tag info to PDF file properties
	$regexp = '/ (\\w+?)=([^\\s>"]+)/si'; // changes anykey=anyvalue to anykey="anyvalue" (only do this when this happens inside tags)
 	$html = preg_replace($regexp," \$1=\"\$2\"",$html);
  $regexp = '/<meta .*?(name|content)="(.*?)" .*?(name|content)="(.*?)".*?>/si';
  preg_match_all($regexp,$html,$aux);
  
  $firstattr = $aux[1];
  $secondattr = $aux[3];
  for( $i = 0 ; $i < count($aux[0]) ; $i++)
  {

     $name = ( strtoupper($firstattr[$i]) == "NAME" )? strtoupper($aux[2][$i]) : strtoupper($aux[4][$i]);
     $content = ( strtoupper($firstattr[$i]) == "CONTENT" )? $aux[2][$i] : $aux[4][$i];
     switch($name)
     {
       case "KEYWORDS": $this->SetKeywords($content); break;
       case "AUTHOR": $this->SetAuthor($content); break;
       case "DESCRIPTION": $this->SetSubject($content); break;
     }
  }
  //Comercial do Aplicativo usado (no caso um script):
  $this->SetCreator("HTML2FPDF >> http://chiangmaioasis.net");
}
function DisableTags($str='')
{
//! @return void
//! @desc Disable some tags using ',' as separator. Enable all tags calling this function without parameters.
  if ($str == '') //enable all tags
  {
    //Insert new supported tags in the long string below.
    $this->enabledtags = "<tt><kbd><samp><option><outline><span><newpage><page_break><s><strike><del><bdo><big><small><address><ins><cite><font><center><sup><sub><input><select><option><textarea><title><form><ol><ul><li><h1><h2><h3><h4><h5><h6><pre><b><u><i><a><img><p><br><strong><em><code><th><tr><blockquote><hr><td><tr><table><div>";
  }
  else
  {
    $str = explode(",",$str);
    foreach($str as $v) $this->enabledtags = str_replace(trim($v),'',$this->enabledtags);
  }
}
/*
 * Function writeVisualBlockData
 * @parameter $cellWidth - width of each cell
 * @parameter $cellHeight - height of each cell
 * This function : write data in visual block into cell of pdf file
 */
function writeVisualBlockData($cellWidth,$cellHeight){
	//For show imgae
	//echo "<br>Pos X : ".$this->GetX();
	$imgWidth = 0;
	if(isset($this->table[$this->nowTable]["image"][$this->col]["src"])){
		$this->Image($this->table[$this->nowTable]["image"][$this->col]["src"],$this->GetX()+1,$this->GetY()+1,$this->table[$this->nowTable]["image"][$this->col]["width"],$this->table[$this->nowTable]["image"][$this->col]["height"]);	
		$imgWidth= $this->table[$this->nowTable]["image"][$this->col]["width"]+1;
	//	echo "<br>Img W : ".$this->table[$this->nowTable]["image"][$this->col]["width"];
	}
	//echo "<br>Cell Width : $cellWidth";
	/////// write cell into pdf file and fill color into cell
	$this->Cell($cellWidth+$imgWidth,$cellHeight,'',$this->border,'','',$this->getTdBgColor());
	//$this->Cell($cellWidth,$cellHeight,'',1,'','',$this->getTdBgColor());
	$firstBr=true;
	$posX=$this->GetX();
	$posY=$this->GetY();
	//echo "<br>Write Cell ";
	//echo "<br>Now Table : ".$this->nowTable;
	//echo "<br>Cell Width : ".$cellWidth;
	//echo "<br>Cell Height : ".($posY+$cellWidth);
	//$this->table[$this->nowTable]["tableHeight"]= $posY+$this->table[$this->nowTable]["trHeight"][$this->row];
	$this->table[$this->nowTable]["tableHeight"]= $posY+$cellHeight;
	
	//echo "<br>X : $posX  <==> Y : $posY<br>";
	//print_r($this->visualBlock);
	$colSpan=0;
	if($this->table[$this->nowTable]["tdColSpan"]){
		$colSpan=$this->table[$this->nowTable]["tdColSpan"];
	}
	
	////////// Write text in visual block into cell on pdf
	for($y=0;$y<=$this->visualY;$y++){
		$this->SetTextColor(0);
		$strlen=0;
		$extraX=0;
		$bufferWriteData="";
		$checkSpace = "";
		$setBFont = false;
		$dataBlock = array();
		$countData = 0;
		
		for($x=0;$x<=$this->visualX;$x++){
			/////// Check text is set bold font or not. //////////////////
			//Debug Undefined Index
			if(!isset($this->visualBlock[$x][$y]["bFont"])){$this->visualBlock[$x][$y]["bFont"]="";}
			if(!isset($this->visualBlock[$x][$y]["color"]["r"])){$this->visualBlock[$x][$y]["color"]["r"]="";}
			if(!isset($this->visualBlock[$x][$y]["color"]["b"])){$this->visualBlock[$x][$y]["color"]["b"]="";}
			if(!isset($this->visualBlock[$x][$y]["color"]["g"])){$this->visualBlock[$x][$y]["color"]["g"]="";}
			if(!isset($this->visualBlock[$x][$y]["br"])){$this->visualBlock[$x][$y]["br"]="";}
			if(!isset($this->visualBlock[$x][$y]["data"])){$this->visualBlock[$x][$y]["data"]="";}
			if(!isset($dataBlock["bFont"])){$dataBlock["bFont"]="";}
			if(!isset($this->table[$this->nowTable]["tdClass"][$this->col-$colSpan])){$this->table[$this->nowTable]["tdClass"][$this->col-$colSpan]="";}
			//
			if($this->visualBlock[$x][$y]["bFont"] && $this->table[$this->nowTable]["tdClass"][$this->col-$colSpan]!="reporth"){
				$dataBlock["bFont"][$countData]=true;
			}
			/////// Check text is set character or not. //////////////////
			//if($this->visualBlock[$x][$y]["color"]["set"]){ Remove 27-04-2009 for check all color
				$dataBlock["bColor"]["r"][$countData]=$this->visualBlock[$x][$y]["color"]["r"];
				$dataBlock["bColor"]["b"][$countData]=$this->visualBlock[$x][$y]["color"]["b"];
				$dataBlock["bColor"]["g"][$countData]=$this->visualBlock[$x][$y]["color"]["g"];
				$dataBlock["bColor"]["Set"][$countData]=true;
			//}
			///////// Check visual block has data or not. /////////////////
			$checkSpace =str_replace(" ","",$this->visualBlock[$x][$y]["data"]);
			if($checkSpace!=""){
				$bufferWriteData.=$this->visualBlock[$x][$y]["data"];
				$dataBlock["data"][$countData]=	$this->visualBlock[$x][$y]["data"];
				$countData++;
			}
			////////////// Check enter to new line./////////////
			if($this->table[$this->nowTable]["tdBr"] && $firstBr){
				$posY-=$cellHeight-5;
				$firstBr=false;
			}
			if($this->visualBlock[$x][$y]["br"]){
				//echo "<br>BR";
				$posY+=$cellHeight/($this->table[$this->nowTable]["tdBr"]+1.5);
			}
			
			
		}
		if($bufferWriteData!=""){
			$chkNumb = str_replace(" ","",$bufferWriteData);
			if(is_numeric($chkNumb)){
				$bufferWriteData = $chkNumb;
			}
			///////// convert UTF-8 to ISO-8859-11 for support thai font
			$bufferWriteData = iconv("UTF-8","ISO-8859-11//IGNORE" , $bufferWriteData);
			$strlen = $this->GetStringWidth($bufferWriteData);	
			
		//	echo "<br>Data : ".$bufferWriteData."<br><br>";
			///////// check text width more than cell width or not.
			///////// if text width more than cell width will split text
			if($cellWidth< $strlen){
				$tmpStr=array();
				if($cellWidth < 5){
					$cellWidth=6;
				}
				$subStr = str_split($bufferWriteData,$cellWidth-5);
				
				$tmp = explode(" ",$subStr[0]);
				if(count($tmp)>2){
					for($cs=0;$cs<count($tmp)-1;$cs++){
						if($cs==0){
							$tmpStr[0]=$tmp[0];
						}else{
							$tmpStr[0].=" ".$tmp[$cs];	
						}
					}
					$tmpStr[1]=$tmp[count($tmp)-1].$subStr[1];
				}else{
					//Debug Undefined Index
					if(!isset($tmp[0])){$tmp[0]="";}
					if(!isset($tmp[1])){$tmp[1]="";}
					//
					$tmpStr[0]=$tmp[0];
					$tmpStr[1]=$tmp[1].$subStr[1];	
				}
				
				$posY+=$cellHeight/(count($tmpStr)-.5);
				for($s=0;$s<count($tmpStr);$s++){
				//Debug Undefined Index
				if(!isset($dataBlock["bFont"][0])){$dataBlock["bFont"][0]="";}
				//
					$strlen = $this->GetStringWidth($tmpStr[$s]);
					$posY+=$cellHeight/count($tmpStr)*$s;
					
					////////// Now not stable in check new line Bold font
					if($dataBlock["bFont"][0]){
						$this->SetFont($this->fFamily,"B",$this->fSize);
					}else if($this->table[$this->nowTable]["tdClass"][$this->col-$colSpan]=="reporth"){
						
					}else{
						$this->reSetFont();
					}
					$extraX = -$this->checkPadding()+$this->checkAlign($strlen,$cellWidth);
					//////// wirte data into cell
					$this->Text($posX-$cellWidth+$extraX,$posY-($this->table[$this->nowTable]["trHeight"][$this->row]/4),$tmpStr[$s]);
				}
			}else{
				$messLen="";
				for($w=0;$w<=$countData;$w++){
				//Debug Undefined Index
				if(!isset($dataBlock["bColor"]["Set"][$w])){$dataBlock["bColor"]["Set"][$w]="";}
				if(!isset($dataBlock["bFont"][$w])){$dataBlock["bFont"][$w]="";}
				if(!isset($dataBlock["data"][$w])){$dataBlock["data"][$w]="";}
				if(!isset($this->table[$this->nowTable]["tdClass"][$this->col-($colSpan-1)])){$this->table[$this->nowTable]["tdClass"][$this->col-($colSpan-1)]="";}
				//
					if($dataBlock["bColor"]["Set"][$w]){
						$this->SetTextColor($dataBlock["bColor"]["r"][$w],$dataBlock["bColor"]["b"][$w],$dataBlock["bColor"]["g"][$w]);
					}
					if($dataBlock["bFont"][$w]){
						$this->SetFont($this->fFamily,"B",$this->fSize);
					}else{
						$this->reSetFont();
					}
					if($this->table[$this->nowTable]["tdClass"][$this->col-($colSpan-1)]=="reporth"){
						$this->SetFont($this->fFamily,"B",$this->fSize+4);
					}
					///////////// Check string width for assign to align //////////////	
					$strlen = $this->GetStringWidth($bufferWriteData);
					//////// wirte data into cell
					$extraX = -$this->checkPadding()+$this->checkAlign($strlen,$cellWidth)+$this->GetStringWidth($messLen);
					//echo "<br>Pos Y : ".($posY+$cellHeight-($this->table[$this->nowTable]["trHeight"][$this->row]/4))." -- Pos X : ".($posX-$cellWidth+$extraX);
					$this->Text(($posX-$cellWidth+$extraX),($posY+$cellHeight-($this->table[$this->nowTable]["trHeight"][$this->row]/4)),iconv("UTF-8","ISO-8859-11//IGNORE" , $dataBlock["data"][$w]));					
					$messLen.=$dataBlock["data"][$w];
				}
				//echo "<br>";
			}
			
		}
	}
}
function checkAlign($strlen,$cellWidth){
	//////////// check align 
	
	switch($this->align){
	   	case 'center': // TABLE-BEGIN
	   		return ($cellWidth/2)-($strlen/2);//-($strlen/2);
	
	   		break;
		
		case 'left':
			///////// statement				
			break;
					
		case 'right':
			return $cellWidth-$strlen;
			break;
						
		default :
								
	}
}
/*
 * fuction checkClass for check to add pdf first page. 
 */
function checkClass($class){
	if($class=="pdffirstpage"){
		$this->cPage++;
	    $this->AddPage();
	}
}
function checkStyle($styleS){
	$contents =explode(";",$styleS);
	if (!empty($contents)){
	  	foreach($contents as $v){
	  		$tmp=explode("padding",$v);
	  		if(count($tmp)>1){
	  			$this->style["P"]="Padding";
	  			//Debug Undefined Index
	  				$tmp=(isset($tmp[1]))?explode("-",$tmp[1]):"";
	  				$tmp=(isset($tmp[1]))?explode(":",$tmp[1]):"";
	  				$tmp=(isset($tmp[1]))?explode("p",$tmp[1]):"";
	  				$this->style["padding"]["name"]=(isset($tmp[0]))?$tmp[0]:"";
	  				$this->style["padding"]["point"]=(isset($tmp[0]))?$tmp[0]:"";
	  			//
	  			//$tmp=explode("-",$tmp[1]);
	  			//$tmp=explode(":",$tmp[1]);
	  			//$this->style["padding"]["name"]=$tmp[0];
	  			//$tmp=explode("p",$tmp[1]);
	    		//$this->style["padding"]["point"]=$tmp[0];
	     	}
	     	$tmp=explode("text",$v);
	     	if(count($tmp)>1){
	     		$tmp=explode("-",$tmp[1]);
	     		$tmp=explode(":",$tmp[1]);
	     		$this->style["text"]["name"]=$tmp[0];
	     		$this->style["text"]["class"]=str_replace(" ","",$tmp[1]);
	     	}
	     	$tmp=explode("border",$v);
	     	if(count($tmp)>1){
	     		//Debug Undefined Index
	  				$tmp=(isset($tmp[1]))?explode("-",$tmp[1]):"";
	  				$tmp=(isset($tmp[1]))?explode(":",$tmp[1]):"";
	  				$this->style["text"]["name"]=(isset($tmp[0]))?$tmp[0]:"";
	  				$this->style["text"]["class"]=(isset($tmp[1]))?str_replace(" ","",$tmp[1]):"";
	  			//
	     		//$tmp=explode("-",$tmp[1]);
	     		//$tmp=explode(":",$tmp[1]);
	     		//$this->style["text"]["name"]=$tmp[0];
	     		//$this->style["text"]["class"]=str_replace(" ","",$tmp[1]);
	     	}
	     	///////////// Check enter to new page from key word /////////////////
	     	$tmp=explode("page",$v);
	     	if(count($tmp)>1){
	     		$tmp=explode("-",$tmp[1]);
	     		if($tmp[1]=="break"){
	     			$tmp=explode(":",$tmp[2]);
	     			if($tmp[0]=="before"&&$tmp[1]=="always"){
	     				$this->cPage++;
	     				if($this->table[$this->cPage*2]["tableWidth"]!=null){
	     					$this->lMargin=$this->sLMargin+($this->pgWidth-ConvertSize($this->table[$this->cPage*2]["tableWidth"]))/2;
	     				}
	     				$this->AddPage();
	     			}
	     		}
	     	}
	     	///////// Set text color ///////////
	     	//echo "<br>X : ".$this->visualX;
	     	//echo "<br>color : $v";
	     	$tmp=explode("color",$v);
	     	if(count($tmp)>1){
	     		$tmp=explode(":",$tmp[1]);
	     		$tmp=explode("#",$tmp[1]);
	     		$tmp=str_split($tmp[1],2);
	     		//echo "<br>Set Color : visual X : ".$this->visualX." -- visual Y : ".$this->visualY;
	     		//$this->visualBlock[$this->visualX][$this->visualY]["color"]["set"]=true; Remove 27-04-2009 for check all color
	     		if($tmp[0]!=""){
	     			$this->visualBlock[$this->visualX][$this->visualY]["color"]["r"]=hexdec($tmp[0]);
	     		}
	     		if($tmp[1]!=""){
	     			$this->visualBlock[$this->visualX][$this->visualY]["color"]["b"]=hexdec($tmp[1]);
	     		}
	     		if($tmp[2]!=""){
	     			$this->visualBlock[$this->visualX][$this->visualY]["color"]["g"]=hexdec($tmp[2]);
	     		}
	     	}else{
	     		
	     	}
	     	$this->checkUnderline();
			$this->checkSetAlign();
			$this->checkBorder();
	     	
	  	}
	}
}
function checkBorder(){
	if($this->style["text"]["name"]=="top"){
		$this->border.="T";
	}else if($this->style["text"]["name"]=="bottom"){
		$this->border.="B";
	}
}
function checkUnderline(){
//Debug Undefined Index
if(!isset($this->style["text"]["name"])){$this->style["text"]["name"]="";}
//
	if($this->style["text"]["name"]=="decoration"){
		if($this->style["text"]["class"]=="underline"){
			$this->SetFont('','U');
		}else{
			$this->SetFont('','');
		}
	}else{
		$this->SetFont('','');
	}
	
}
function checkSetAlign() {
//Debug Undefined Index
if(!isset($this->style["text"]["name"])){$this->style["text"]["name"]="";}
//
	if($this->style["text"]["name"]=="align"){
		if($this->style["text"]["class"]!=" "){
			$this->align=$this->style["text"]["class"];
		}
			
	}
	
}
function checkPadding(){
//Debug Undefined Index
if(!isset($this->style["padding"]["name"])){$this->style["padding"]["name"]="";}
//
	switch($this->style["padding"]["name"]){
	    case 'right':
	    	
	    	if($this->align=="left"){
	    		return 0;	
	    	}else{
	    		return $this->style["padding"]["point"]/10;
	    	}
			
			break;
		case 'left':
			if($this->align=="right"){
	    		return 0;
			}else{
				return -$this->style["padding"]["point"]/10;
			}
			break;
		
	}
}
function getTdBgColor(){
	$col=$this->col-$this->table[$this->nowTable]["tdColSpan"];
	//Debug Undefined Index
	if(!isset($this->table[$this->nowTable]["tdBgColor"][$col])){$this->table[$this->nowTable]["tdBgColor"][$col]="";}
	//
	if($this->table[$this->nowTable]["trBgColor"][$this->row]!=""){
		//echo "<br>Color".$this->table[$this->nowTable]["trBgColor"][$this->row];
		$color=explode("#",$this->table[$this->nowTable]["trBgColor"][$this->row]);
	    $color=str_split($color[1],2);
	    if(strlen($color[2])<2){
	   		$color[2] .="0";
	   	}
	     $color[0]=hexdec($color[0]);
	     $color[1]=hexdec($color[1]);
	     $color[2]=hexdec($color[2]);
		$this->SetFillColor($color[0],$color[1],$color[2]);
		return true;
	}else if($this->table[$this->nowTable]["tdBgColor"][$col]!=""){
		//echo "<br>Color".$this->table[$this->nowTable]["tdBgColor"][$this->col];
		//echo "<br>colum : ".$this->col;
		$color=explode("#",$this->table[$this->nowTable]["tdBgColor"][$col]);
	    $color=str_split($color[1],2);
	    if(strlen($color[2])<2){
	   		$color[2] .="0";
	   	}
	     $color[0]=hexdec($color[0]);
	     $color[1]=hexdec($color[1]);
	     $color[2]=hexdec($color[2]);
		$this->SetFillColor($color[0],$color[1],$color[2]);
		return true;
	}else{
		return false;
	}
}

function reSetFont(){
	$this->SetFont($this->fFamily,$this->fStyle,$this->fSize);
}
/*
function countTable($a){
	$nowTable=0;
	$numTable=-1;
	$isTable=false;
	$numTr=0;
	$isContTd=array();
	foreach($a as $i => $e){
		if($i%2==0){
		}else{
			if($e{0}=='/'){
				//Statement
			}else{
				/////////////////////// check tag open
			    $regexp = '|=\'(.*?)\'|s'; // eliminate single quotes, if any
		      	$e = preg_replace($regexp,"=\"\$1\"",$e);
		      			$regexp = '| (\\w+?)=([^\\s>"]+)|si'; // changes anykey=anyvalue to anykey="anyvalue" (only do this when this happens inside tags)
		      	$e = preg_replace($regexp," \$1=\"\$2\"",$e);
				//Extract attributes
				$contents=array();
		        preg_match_all('/\\S*=["\'][^"\']*["\']/',$e,$contents);
		        preg_match('/\\S+/',$e,$a2);
		       	$tag=strtoupper($a2[0]);
		       	$attr=array();
		       	//Ignore content between <table>,<tr> and a <td> tag (this content is usually only a bunch of spaces)
				if (!empty($contents))
				{
		  			foreach($contents[0] as $v)
		  			{
		  				if(ereg('^([^=]*)=["\']?([^"\']*)["\']?$',$v,$a3))
		    			{
		    				$attr[strtoupper($a3[1])]=$a3[2];
		     			}
		  			}
				}
			}
			preg_match('/\\S+/',$e,$a2);
		    $tag=strtoupper($a2[0]);
		    if($tag=="/TABLE"){
				$isTable=false;
		    }
			if($tag=="TABLE"){
				$numTable++;
				$numTr=0;
				$isTable=true;
				//echo "<br> Table ";
			}
			if($tag=="TR"){
				$numTr++;	
			}
			if($isTable && $numTr==1 && $tag=="TD"){
				$this->table[$numTable]["td"]++;
				//echo "<br>$tag :: Width : ".$attr["WIDTH"]." :: ".stristr($attr["WIDTH"],'%');
				if(stristr($attr["WIDTH"],'%')){
					$this->table[$numTable]["tableWidth"]=null;
				}else{
					$this->table[$numTable]["tableWidth"]+=$attr["WIDTH"];	
				}
				//echo "<br>".$this->table[$numTable]["tableWidth"];
			}
		}
	}
	///print_r($this->table);
}*/
/////////////// Create by natt : 5-03-2009
////// This function get web page from url and write content to buffer stream
function get_web_page( $url )
{
	if(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=="on"){
		$http = "https://";
	}else{
		$http = "http://";
	}
	$url = $http.$url;
    $ch  = curl_init($url);
    // Set for get content of file from SSL //
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
    //curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
    curl_setopt($ch, CURLOPT_ENCODING, "");
    curl_setopt($ch, CURLOPT_USERAGENT, "Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)");
    curl_setopt($ch, CURLOPT_AUTOREFERER, 1);
    //curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 120);
    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 0);
    //curl_setopt($ch, CURLOPT_TIMEOUT, 120);
    curl_setopt($ch, CURLOPT_TIMEOUT, 0);
    curl_setopt($ch, CURLOPT_MAXREDIRS, 10);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER , 1);
	curl_setopt($ch, CURLOPT_TIMEOUT, 30);
	curl_setopt($ch, CURLOPT_HEADER, 1);
	curl_setopt($ch, CURLOPT_VERBOSE, 1);
    
    $result = curl_exec($ch);
    
    $content = curl_exec($ch);
    $err     = curl_errno( $ch );
    $errmsg  = curl_error( $ch );
    $headerC  = curl_getinfo( $ch );
    curl_close( $ch );
    $header['errno']   = $err;
    $header['errmsg']  = $errmsg;
    $header['content'] = $content;
    $header['header'] = $headerC;
    
    //echo "<br>Header : Oasis <br>";
	//print_r($headerC);
	//echo "<br>content : ".$content;
	
    return $header;
}
}
?>
